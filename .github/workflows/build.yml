# GitHub Actions workflow for testing and preparing the plugin release.
# GitHub Actions reference: https://help.github.com/en/actions

name: Coder Gateway Plugin Build

on:
  push:
    branches:
      - main
      - eap
  pull_request:

jobs:

  # Run plugin tests on every supported platform.
  test:
    strategy:
      matrix:
        platform:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4.1.1

      - uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17
          cache: gradle

      - uses: gradle/wrapper-validation-action@v1.1.0

      # Run tests
      - run: ./gradlew test --info

      # Collect Tests Result of failed tests
      - if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum.  Run
  # verifyPlugin and IntelliJ Plugin Verifier.  Build plugin and provide the
  # artifact for the next workflow jobs.
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.1.1

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=changelog::$CHANGELOG"
          echo "::set-output name=pluginVerifierHomeDir::~/.pluginVerifier"
          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Run plugin build
      - name: Run Build
        run: ./gradlew clean buildPlugin --info

# until https://github.com/JetBrains/gradle-intellij-plugin/issues/1027 is solved

#      # Cache Plugin Verifier IDEs
#      - name: Setup Plugin Verifier IDEs Cache
#        uses: actions/cache@v2.1.7
#        with:
#          path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
#          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}
#
#      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
#      - name: Run Plugin Verification tasks
#        run: ./gradlew runPluginVerifier -Pplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}
#
#      # Collect Plugin Verifier Result
#      - name: Collect Plugin Verifier Result
#        if: ${{ always() }}
#        uses: actions/upload-artifact@v3
#        with:
#          name: pluginVerifier-result
#          path: ${{ github.workspace }}/build/reports/pluginVerifier

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2023.2.8

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content
          echo "::set-output name=filename::${FILENAME:0:-4}"
      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.1.1

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --target ${GITHUB_REF_NAME} \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"
