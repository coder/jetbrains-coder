# GitHub Actions workflow for testing and preparing the plugin release.
# GitHub Actions reference: https://help.github.com/en/actions

name: Coder Gateway Plugin Build

on:
  push:
    branches:
      - main
      - eap
      - compat
  pull_request:

jobs:

  # Run plugin tests on every supported platform.
  test:
    strategy:
      matrix:
        platform:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4.1.7

      - uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17
          cache: gradle

      - uses: gradle/wrapper-validation-action@v3.5.0

      # Run tests
      - run: ./gradlew test --info

      # Collect Tests Result of failed tests
      - if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum.  Run
  # verifyPlugin and IntelliJ Plugin Verifier.  Build plugin and provide the
  # artifact for the next workflow jobs.
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.1.7

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17
          cache: gradle

      # Run plugin build
      - name: Run Build
        run: ./gradlew clean build --info

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2023.3.2

      # Store already-built plugin as an artifact for downloading
      # TODO: Need a modified copyPlugin task or something like that to copy all
      #       the required jar files.
      #- name: Upload artifact
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: ${{ steps.artifact.outputs.filename }}
      #    path: ./build/distributions/content/*/*

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.1.7

      # TODO: If we keep the two plugins in the same repository, we need a way
      #       to differentiate the tags and releases.
      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "Not implemented" ; exit 1 #|
          #gh api repos/{owner}/{repo}/releases \
          #  --jq '.[] | select(.draft == true) | .id' \
          #  | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "Not implemented" ; exit 1 #|
          #gh release create v${{ needs.build.outputs.version }} \
          #  --draft \
          #  --target ${GITHUB_REF_NAME} \
          #  --title "v${{ needs.build.outputs.version }}" \
          #  --notes "$(cat << 'EOM'
          #${{ needs.build.outputs.changelog }}
          #EOM
          #)"
